<?xml version="1.0" encoding="UTF-8"?>

<?import com.jfoenix.controls.JFXButton?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.shape.Circle?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane prefHeight="457.0" prefWidth="826.0" style="-fx-background-color: A9B0B7;" xmlns="http://javafx.com/javafx/17" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.JavaFX.ResultsController">
   <children>
      <AnchorPane layoutX="511.0" layoutY="61.0" prefHeight="78.0" prefWidth="304.0">
         <children>
            <Text layoutX="6.0" layoutY="36.0" strokeType="OUTSIDE" strokeWidth="0.0" text="File name:" textAlignment="CENTER" wrappingWidth="297.400390625">
               <font>
                  <Font size="20.0" />
               </font>
            </Text>
            <Text fx:id="assignment2" layoutX="6.0" layoutY="63.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Student2Assignment1" textAlignment="CENTER" wrappingWidth="297.400390625">
               <font>
                  <Font size="20.0" />
               </font>
            </Text>
         </children>
      </AnchorPane>
      <AnchorPane layoutX="14.0" layoutY="56.0" prefHeight="88.0" prefWidth="335.0">
         <children>
            <Text layoutX="6.0" layoutY="36.0" strokeType="OUTSIDE" strokeWidth="0.0" text="File name:" textAlignment="CENTER" wrappingWidth="297.400390625">
               <font>
                  <Font size="20.0" />
               </font>
            </Text>
            <Text fx:id="assignment1" layoutX="6.0" layoutY="63.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Student1Assignment1" textAlignment="CENTER" wrappingWidth="297.400390625">
               <font>
                  <Font size="20.0" />
               </font>
            </Text>
         </children>
      </AnchorPane>
      <AnchorPane layoutX="-13.0" layoutY="-14.0" prefHeight="88.0" prefWidth="848.0" style="-fx-background-color: AC2B37;">
         <children>
            <Label fx:id="drawerImage" layoutX="7.0" layoutY="7.0" />
            <ImageView fx:id="exit" fitHeight="24.0" fitWidth="24.0" layoutX="822.0" layoutY="18.0" onMouseClicked="#returnToTable" pickOnBounds="true" preserveRatio="true">
               <image>
                  <Image url="@../images/exit.png" />
               </image>
            </ImageView>
            <Text layoutX="275.0" layoutY="61.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Results" textAlignment="CENTER" wrappingWidth="297.400390625">
               <font>
                  <Font size="48.0" />
               </font>
            </Text>
         </children>
      </AnchorPane>
      <Circle fill="#60da85" layoutX="418.0" layoutY="303.0" radius="71.0" stroke="BLACK" strokeType="INSIDE" style="-fx-fill: AC2B37;" />
      <Text fx:id="resultValue" layoutX="351.0" layoutY="314.0" strokeType="OUTSIDE" strokeWidth="0.0" text="65.25%" textAlignment="CENTER" wrappingWidth="133.400390625">
         <font>
            <Font size="31.0" />
         </font>
      </Text>
      <Text layoutX="329.0" layoutY="216.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Similarity Value" textAlignment="CENTER" wrappingWidth="177.400390625">
         <font>
            <Font size="18.0" />
         </font>
      </Text>
      <Text fx:id="possibleCases" fill="#ab2b38" layoutX="347.0" layoutY="179.0" strokeType="OUTSIDE" strokeWidth="0.0" text="12 Possible Cases" textAlignment="CENTER" underline="true" wrappingWidth="142.0">
         <font>
            <Font size="18.0" />
         </font>
      </Text>
      <JFXButton fx:id="nextCase" buttonType="RAISED" layoutX="365.0" layoutY="463.0" prefHeight="32.0" prefWidth="105.0" styleClass="circle-button" stylesheets="@../buttonStylesheet.css" text="Next Case" textAlignment="CENTER" underline="true">
         <font>
            <Font size="15.0" />
         </font>
      </JFXButton>
      <Text fx:id="caseNum" layoutX="380.0" layoutY="107.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Case #65:">
         <font>
            <Font size="18.0" />
         </font>
      </Text>
      <TextArea fx:id="textArea1" editable="false" layoutX="13.0" layoutY="146.0" prefHeight="345.0" prefWidth="316.0" text="(check-expect (backwards &quot;&quot;) &quot;&quot;)&#10;(check-expect (backwards &quot;Hey&quot;) &quot;yeH&quot;)&#10;(check-expect (backwards &quot;a&quot;) &quot;a&quot;)&#10;&#10;(define (backwards str) &quot;&quot;) &#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define-struct customer (fname lname age zip))&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define C1 (make-customer &quot;Joseph&quot; &quot;Mazzei&quot; 18 &quot;01605&quot;))&#10;(define C2 (make-customer &quot;Kaz&quot; &quot;Erdos&quot; 17 &quot;01754&quot;))&#10;&#10; &#10;&#10;&#10;&#10;&#10;&#10;&#10;(check-expect (birthday C1) (make-customer &quot;Joseph&quot; &quot;Mazzei&quot; (+ 18 1) &quot;01605&quot;))&#10;(check-expect (birthday C2) (make-customer &quot;Kaz&quot; &quot;Erdos&quot; (+ 17 1) &quot;01754&quot;))&#10;&#10;&#10;&#10;&#10;&#10;(define (birthday acustomer)&#10;  (make-customer (customer-fname acustomer)&#10;                 (customer-lname acustomer)&#10;                 (+ 1 (customer-age acustomer))&#10;                 (customer-zip acustomer)))&#10;&#10;&#10;&#10;&#10;(check-expect (name-change C1 &quot;&quot; &quot;Dalbeck&quot;) (make-customer &quot;&quot; &quot;Dalbeck&quot; (customer-age C1) (customer-zip C1)))&#10;(check-expect (name-change C2 &quot;Bobby&quot; &quot;Jones&quot;) (make-customer &quot;Bobby&quot; &quot;Jones&quot; (customer-age C2) (customer-zip C2)))&#10;&#10;&#10;&#10;&#10;&#10;(define (name-change acustomer new-fname new-lname)&#10;  (make-customer new-fname&#10;                 new-lname&#10;                 (customer-age acustomer) &#10;                 (customer-zip acustomer)))&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define-struct simple-img (type color area))&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define SI (make-simple-img &quot;triangle&quot; &quot;red&quot; 250))&#10;(define SI1 (make-simple-img  &quot;circle&quot; &quot;red&quot; 120))&#10;(define SI2 (make-simple-img &quot;square&quot; &quot;purple&quot; 200))&#10;(define SI3 (make-simple-img &quot;circle&quot; &quot;purple&quot; 40))&#10;(define SI4 (make-simple-img &quot;square&quot; &quot;white&quot; 0))&#10;(define SI5 (make-simple-img &quot;triangle&quot; &quot;white&quot; 0))&#10;&#10; &#10;&#10;&#10;&#10;&#10;&#10;&#10;(check-expect (bigger? SI SI2) true)&#10;(check-expect (bigger? SI3 SI4) true)&#10;(check-expect (bigger? SI2 SI) false)&#10;&#10;&#10;&#10;&#10;&#10;(define (bigger? si1 si2)&#10;  (&gt;&#10;   (simple-img-area si1)&#10;   (simple-img-area si2)))&#10;&#10;&#10;&#10;&#10;(check-expect (build-image SI2) (square (sqrt 200) &quot;solid&quot; &quot;purple&quot;))&#10;(check-expect (build-image SI3) (circle  (sqrt (/ 40 pi)) &quot;solid&quot; &quot;purple&quot;))&#10;(check-expect (build-image SI4) (square  (sqrt 0) &quot;solid&quot; &quot;white&quot;))&#10;(check-expect (build-image SI) (triangle  (sqrt (* 4 (/ 250 (sqrt 3)))) &quot;solid&quot; &quot;red&quot;))&#10;&#10;&#10;&#10;&#10;&#10;(define (build-image asimple-img)&#10;  (cond[(string=? (simple-img-type asimple-img) &quot;square&quot;)&#10;        (square (find-length asimple-img &quot;square&quot;)&#10;                &quot;solid&quot;&#10;                (simple-img-color asimple-img))]&#10;       [(string=? (simple-img-type asimple-img) &quot;triangle&quot;)&#10;        (triangle (find-length asimple-img &quot;triangle&quot;)&#10;                  &quot;solid&quot;&#10;                  (simple-img-color asimple-img))]&#10;       [else&#10;        (circle (find-length asimple-img &quot;circle&quot;)&#10;                &quot;solid&quot;&#10;                (simple-img-color asimple-img))]))&#10;&#10;&#10;&#10;&#10;(check-within (find-length SI &quot;triangle&quot;) (sqrt (* 4 (/ 250 (sqrt 3)))) 0.1)&#10;(check-expect (find-length SI5 &quot;triangle&quot;) 0)&#10;(check-within (find-length SI3 &quot;circle&quot;) (sqrt (/ 40 pi)) 0.1)&#10;(check-within (find-length SI2 &quot;square&quot;) (sqrt 200) 0.1)&#10;&#10;&#10;&#10;(define (find-length asimple-img type)&#10;  (cond&#10;    [(= (simple-img-area asimple-img) 0)&#10;     0]&#10;    [(string=? type &quot;square&quot;)&#10;     (sqrt (simple-img-area asimple-img))]&#10;    [(string=? type &quot;triangle&quot;)&#10;     (sqrt (* 4 (/ (simple-img-area asimple-img) (sqrt 3))))]&#10;    [else&#10;     (sqrt (/ (simple-img-area asimple-img) pi))]))&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define-struct diff (insert? pos to-insert num-chars))&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define D1 (make-diff true 1 &quot;hey&quot; 0))&#10;(define D2 (make-diff false 5 &quot;&quot; 3))&#10;(define D3 (make-diff false 0 &quot;&quot; 2))&#10;(define D4 (make-diff true 7 &quot; boy&quot; 0))&#10;&#10; &#10;&#10;&#10;&#10;&#10;&#10;&#10;(check-expect (update &quot;hello&quot; D1) (string-append (substring &quot;hello&quot; 0 1) (diff-to-insert D1) (substring &quot;hello&quot; 1)))&#10;(check-expect (update &quot;balloon&quot; D4) (string-append &quot;balloon&quot;  (diff-to-insert D4)))&#10;(check-expect (update &quot;hi there my friend!&quot; D2)&#10;              (string-append (substring &quot;hi there my friend!&quot; 0 (diff-pos D2))&#10;                             (substring &quot;hi there my friend!&quot; (+ (diff-num-chars D2) (diff-pos D2)))))&#10;(check-expect (update &quot;joe&quot; D2) &quot;joe&quot;)&#10;(check-expect (update &quot;a&quot; D3) &quot;&quot;)&#10;&#10;&#10;&#10;&#10;&#10;(define (update str adiff)&#10;  (cond&#10;    [(diff-insert? adiff)&#10;     (if (pos-valid? str (diff-pos adiff))&#10;         (insert str adiff)&#10;         (string-append str (diff-to-insert adiff)))&#10;     ]&#10;    [(out-of-bounds? str adiff)&#10;     (substring str 0 (diff-pos adiff))]&#10;    [(pos-valid? str (diff-pos adiff))&#10;     (delete str adiff)]&#10;    [else&#10;     str]))&#10;&#10;&#10;&#10;&#10;(check-expect (pos-valid? &quot;&quot; 0) false)&#10;(check-expect (pos-valid? &quot;cat&quot; 1) true)&#10;(check-expect (pos-valid? &quot;dog&quot; 3) false)&#10;&#10;&#10;&#10;(define (pos-valid? str pos)&#10;  (&lt; pos (string-length str)))&#10;&#10;&#10;&#10;&#10;&#10;(check-expect (update &quot;ghetti&quot; D1) (string-append (substring &quot;ghetti&quot; 0 1) (diff-to-insert D1) (substring &quot;ghetti&quot; 1)))&#10;(check-expect (update &quot;The Amazing Spider Man&quot; D1) (string-append (substring &quot;The Amazing Spider Man&quot; 0 1) (diff-to-insert D1) (substring &quot;The Amazing Spider Man&quot; 1)))&#10;&#10;&#10;&#10;(define (insert str adiff)&#10;  (string-append (substring str 0 (diff-pos adiff)) (diff-to-insert adiff) (substring str (diff-pos adiff))))&#10;&#10;&#10;&#10;&#10;(check-expect (delete &quot;abcdefghijklmnop&quot; D2)&#10;              (string-append (substring &quot;abcdefghijklmnop&quot; 0 (diff-pos D2))&#10;                             (substring &quot;abcdefghijklmnop&quot; (+ (diff-num-chars D2) (diff-pos D2)))))&#10;(check-expect (delete &quot;0123456789&quot; D3) &quot;23456789&quot;)&#10;&#10;&#10;&#10;(define (delete str adiff)&#10;  (string-append (substring str 0 (diff-pos adiff))&#10;                    (substring str (+ (diff-num-chars adiff) (diff-pos adiff)))))&#10;&#10;&#10;&#10;&#10;(check-expect (out-of-bounds? &quot;Barney&quot; D2) true)&#10;(check-expect (out-of-bounds? &quot;&quot; D2) false)&#10;(check-expect (out-of-bounds? &quot;Lamp Post&quot; D3) false)&#10;&#10;&#10;&#10;(define (out-of-bounds? str adiff)&#10;  (and (pos-valid? str (diff-pos adiff)) (&gt; (+ (diff-pos adiff) (diff-num-chars adiff)) (string-length str))))&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define I1 .)&#10;(define I2 .)&#10;(define I3 .)&#10;(define I4 .)&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define LOI (list I1 I2 I3 I4))&#10;(define LOI1 empty)&#10;(define LOI2 (list I2))&#10;(define LOI3 (list I2 I4))&#10;&#10;&#10; &#10;&#10;&#10;&#10;&#10;&#10;&#10;(check-expect (total-width LOI) (+ (image-width I1) (image-width I2) (image-width I3) (image-width I4))) &#10;(check-expect (total-width LOI1) 0)&#10;(check-expect (total-width LOI2) (image-width I2))&#10;(check-expect (total-width LOI3) (+ (image-width I2) (image-width I4)))&#10;&#10;&#10;&#10;&#10;&#10;(define (total-width loi)&#10;  (cond&#10;    [(empty? loi) 0]&#10;    [else&#10;     (+ (image-width (first loi))&#10;        (total-width (rest loi)))]))&#10;&#10;&#10;&#10;&#10;(check-expect (taller-than LOI 30)&#10;              (list . .))&#10;(check-expect (taller-than LOI1 50) empty)&#10;(check-expect (taller-than LOI2 10) (list I2))&#10;(check-expect (taller-than LOI3 (- (image-width I4) 1)) (list I4))&#10;&#10;&#10;&#10;(define (taller-than loi cutoff)&#10;  (cond&#10;    [(empty? loi) empty]&#10;    [(&gt; (image-height (first loi)) cutoff)&#10;     (cons (first loi) (taller-than (rest loi) cutoff))]&#10;    [else (taller-than (rest loi) cutoff)]))&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define LOSI1 empty)&#10;(define LOSI2 (list SI2))&#10;(define LOSI3 (list SI3 SI4))&#10;(define LOSI4 (list SI1 SI2 SI3))&#10;&#10; &#10;&#10;&#10;&#10;&#10;&#10;&#10;(check-expect (find-shape (list SI SI1 SI2 SI3) &quot;circle&quot;)&#10;              (list . .))&#10;(check-expect (find-shape LOSI1 &quot;triangle&quot;) empty)&#10;(check-expect (find-shape LOSI2 &quot;square&quot;) (list (build-image SI2)))&#10;(check-expect (find-shape LOSI3 &quot;triangle&quot;) empty)&#10;(check-expect (find-shape LOSI4 &quot;circle&quot;) (list (build-image SI1) (build-image SI3)))&#10;                                                  &#10;&#10;&#10;(define (find-shape losi str)&#10;  (cond&#10;    [(empty? losi) empty]&#10;    [else&#10;     (if (string=? (simple-img-type (first losi)) str)&#10;         (cons (build-image (first losi)) (find-shape (rest losi) str))&#10;         (find-shape (rest losi) str))]))&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define LOD1 empty)&#10;(define LOD2 (cons D2 empty))&#10;(define LOD3 (cons D3 (cons D4 empty)))&#10;&#10; &#10;&#10;&#10;&#10;&#10;&#10;&#10;(check-expect (updates LOD1 &quot;hey&quot;) &quot;hey&quot;)&#10;(check-expect (updates LOD2 &quot;cheerios&quot;) &quot;cheer&quot;)&#10;(check-expect (updates LOD3 &quot;0123456789&quot;) &quot;2345678 boy9&quot;)&#10;&#10;&#10;&#10;&#10;&#10;(define (updates lod str)&#10;  (cond&#10;    [(empty? lod) str]&#10;    [else&#10;     (updates (rest lod) (update str (first lod)))]))" />
      <TextArea fx:id="textArea2" accessibleRole="SCROLL_BAR" editable="false" layoutX="505.0" layoutY="146.0" prefHeight="345.0" prefWidth="316.0" text="(check-expect (backwards &quot;&quot;) &quot;&quot;)&#10;(check-expect (backwards &quot;ABCD&quot;) &quot;DCBA&quot;)&#10;(check-expect (backwards &quot;hello world&quot;) &quot;dlrow olleh&quot;)&#10;&#10;(define (backwards text)&#10; (if (&gt; (string-length text) 0)&#10;     (string-append (backwards (substring text 1)) (substring text 0 1))&#10;     &quot;&quot;))&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define-struct customer (fname lname age zip))&#10; &#10;&#10;&#10;&#10;&#10;(define (birthday customer)&#10;  (make-customer (customer-fname customer)&#10;                 (customer-lname customer)&#10;                 (+ 1 (customer-age customer))&#10;                 (customer-zip customer)))&#10;&#10;(check-expect (birthday (make-customer &quot;Joe&quot; &quot;&quot; 25 01609))&#10;              (make-customer &quot;Joe&quot; &quot;&quot; 26 01609))&#10;(check-expect (birthday (birthday (make-customer &quot;Bob&quot; &quot;&quot; 24 01609)))&#10;              (make-customer &quot;Bob&quot; &quot;&quot; 26 01609))&#10;&#10;&#10;&#10;&#10;(define (name-change customer fname lname)&#10;  (make-customer fname&#10;                 lname&#10;                 (customer-age customer)&#10;                 (customer-zip customer)))&#10;&#10;(check-expect (name-change (make-customer &quot;Joe&quot; &quot;&quot; 25 01609) &quot;Bob&quot; &quot;Builder&quot;)&#10;              (make-customer &quot;Bob&quot; &quot;Builder&quot; 25 01609))&#10;(check-expect (name-change (make-customer &quot;&quot; &quot;&quot; 25 01609) &quot;&quot; &quot;&quot;)&#10;              (make-customer &quot;&quot; &quot;&quot; 25 01609))&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define-struct simple-img (shape color area))&#10; &#10;&#10;&#10;(define SI (make-simple-img &quot;triangle&quot; &quot;red&quot; 250))&#10;&#10;(define SI2 (make-simple-img &quot;square&quot; &quot;purple&quot; 200))&#10;&#10;&#10;&#10;&#10;(check-expect (bigger? SI SI2) true)&#10;(check-expect (bigger? SI2 SI) false)&#10;(check-expect (bigger? SI SI) false)&#10;&#10;&#10;&#10;(define (bigger? simple-img-1 simple-img-2)&#10;  (&gt; (simple-img-area simple-img-1)&#10;     (simple-img-area simple-img-2)))&#10;&#10;&#10;&#10;&#10;(check-expect (build-image (make-simple-img &quot;circle&quot; &quot;blue&quot; 100))&#10;              (circle (sqrt (/ 100 pi)) &quot;solid&quot; &quot;blue&quot;))&#10;(check-expect (build-image SI) .)&#10;(check-expect (build-image SI2) (square (sqrt 200) &quot;solid&quot; &quot;purple&quot;))&#10;&#10;&#10;&#10;(define (build-image simple-img)&#10;  (cond&#10;    [(string=? &quot;square&quot; (simple-img-shape simple-img))&#10;     (square (sqrt (simple-img-area simple-img)) &quot;solid&quot; (simple-img-color simple-img))]&#10;    &#10;    [(string=? &quot;circle&quot; (simple-img-shape simple-img))&#10;     (circle (sqrt (/ (simple-img-area simple-img) pi)) &quot;solid&quot; (simple-img-color simple-img))]&#10;&#10;    [(string=? &quot;triangle&quot; (simple-img-shape simple-img))&#10;     (triangle (* (expt 3 3/4) 2/3 (sqrt (simple-img-area simple-img)))&#10;               &quot;solid&quot; (simple-img-color simple-img))]&#10;    &#10;    [else (...)]))&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define-struct diff (index init result))&#10; &#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;(check-expect (update &quot;there is this thing&quot; (make-diff 9 &quot;this thing&quot; &quot;&quot;)) &quot;there is &quot;)&#10;(check-expect (update &quot;there is this thing&quot; (make-diff 19 &quot;&quot; &quot;.&quot;)) &quot;there is this thing.&quot;)&#10;(check-expect (update &quot;there is that&quot; (make-diff 9 &quot;that&quot; &quot;this thing&quot;)) &quot;there is this thing&quot;)&#10;(check-expect (update &quot;0123456789&quot; (make-diff 1 &quot;&quot; &quot;xyzzy&quot;)) &quot;0xyzzy123456789&quot;)&#10;(check-expect (update &quot;0123456789&quot; (make-diff 2 &quot;23&quot; &quot;&quot;)) &quot;01456789&quot;)&#10;&#10;&#10;&#10;(check-expect (update (update &quot;How are you today?&quot;&#10;                        (make-diff 4 &quot;a&quot; &quot;we&quot;))&#10;                      (make-diff 13 &quot;to&quot; &quot;yester&quot;))&#10;              &quot;How were you yesterday?&quot;)&#10;&#10;(define (update text diff)&#10;  (if (&gt; (string-length (diff-init diff)) 0) &#10;      (string-append (substring text 0 (diff-index diff))&#10;                     (diff-result diff)&#10;                     (substring text (+ (diff-index diff) (string-length (diff-init diff)))))&#10;      &#10;      (string-append (substring text 0 (diff-index diff))&#10;                     (diff-result diff)&#10;                     (substring text (diff-index diff)))))&#10;&#10;&#10;&#10;&#10;&#10;&#10; &#10;&#10;&#10;(define I1 .)&#10;(define I2 .)&#10;(define I3 .)&#10;(define I4 .)&#10;&#10;(define LOI (list I1 I2 I3 I4))&#10;&#10;(define LOI2 (list (circle 20 &quot;solid&quot; &quot;blue&quot;)&#10;                   (rectangle 40 60 &quot;solid&quot; &quot;green&quot;)&#10;                   (ellipse 80 100 &quot;solid&quot; &quot;red&quot;)))&#10;&#10;&#10;&#10;&#10;&#10;&#10;(define (total-width loi)&#10;  (if (empty? loi) &#10;      0&#10;      (+ (image-width (first loi)) (total-width (rest loi)))))&#10;&#10;(check-expect (total-width LOI2) 160)&#10;(check-expect (total-width empty) 0)&#10;(check-expect (total-width LOI) 265) &#10;&#10;&#10;&#10;&#10;&#10;&#10;(check-expect (taller-than empty 0) empty)&#10;(check-expect (taller-than LOI2 50) &#10;              (list (rectangle 40 60 &quot;solid&quot; &quot;green&quot;)&#10;                    (ellipse 80 100 &quot;solid&quot; &quot;red&quot;)))&#10;(check-expect (taller-than LOI2 120) &#10;              empty)&#10;&#10;(define (taller-than loi cutoff)&#10;  (cond [(empty? loi) empty]&#10;        [(&gt; (image-height (first loi)) cutoff)&#10;         (cons (first loi) (taller-than (rest loi) cutoff))]&#10;        [else (taller-than (rest loi) cutoff)]))&#10;&#10;(check-expect (taller-than LOI 30)&#10;              (list . .))&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10; &#10;&#10;(define LOSI (list SI SI2))&#10;&#10;&#10;&#10;&#10;(define (find-shape losi shape)&#10;  (cond [(empty? losi) empty]&#10;        [(string=? (simple-img-shape (first losi)) shape) &#10;         (cons (build-image (first losi)) (find-shape (rest losi) shape))]&#10;        [else (find-shape (rest losi) shape)]))&#10;&#10;&#10;(check-expect (find-shape LOSI &quot;triangle&quot;) &#10;              (list (build-image (make-simple-img &quot;triangle&quot; &quot;red&quot; 250))))&#10;(check-expect (find-shape LOSI &quot;square&quot;) &#10;              (list (build-image (make-simple-img &quot;square&quot; &quot;purple&quot; 200))))&#10;(check-expect (find-shape empty &quot;square&quot;) empty)&#10;&#10;(define SI1 (make-simple-img &quot;circle&quot; &quot;red&quot; 120))&#10;(define SI3 (make-simple-img &quot;circle&quot; &quot;purple&quot; 40))&#10;&#10;(check-expect (build-image SI1) .)&#10;(check-expect (build-image SI3) .)&#10;&#10;(check-expect (find-shape (list SI SI1 SI2 SI3) &quot;circle&quot;)&#10;              (list . .))&#10;&#10;&#10;&#10;&#10;&#10; &#10;&#10;&#10;&#10;&#10;&#10;&#10;(define (updates lod text)&#10;  (if (empty? lod) &#10;      text&#10;      (updates (rest lod) (update text (first lod)))))&#10;&#10;(define DEL (make-diff 3 &quot;34&quot; &quot;&quot;))&#10;(define INS (make-diff 1 &quot;&quot; &quot;xyzzy&quot;))&#10;(define nochange (make-diff 0 &quot;&quot; &quot;&quot; ))&#10;&#10;(check-expect (updates (list nochange) &quot;0123456789&quot;) &quot;0123456789&quot;)&#10;(check-expect (updates (list DEL) &quot;0123456789&quot;) &quot;01256789&quot;)&#10;(check-expect (updates (list INS) &quot;0123456789&quot;) &quot;0xyzzy123456789&quot;)&#10;(check-expect (updates (list DEL INS nochange) &quot;0123456789&quot;) &quot;0xyzzy1256789&quot;)&#10;(check-expect (updates (list DEL INS) &quot;0123456789&quot;) &quot;0xyzzy1256789&quot;)" />
   </children>
</AnchorPane>
