

#reader(lib "htdp-advanced-reader.ss" "lang")((modname |part 3|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f () #f)))
(require 2htdp/image)
(define-struct bst (widget left right))




(define-struct widget (name quantity price))



(define W1 (make-widget "W1" 1 1))
(define Z1 (make-widget "Z1" 51 16))
(define A1 (make-widget "A1" 2 3))
(define D1 (make-widget "D1" 5 5))
(define B1 (make-widget "B1" 7 4))
(define C1 (make-widget "C1" 9 30))
(define E1 (make-widget "E1" 90 2))

(define-struct db (field lt? eq? bst))




(define DB-names (make-db widget-name string<? string=?
                          (make-bst W1
                                    (make-bst A1 false false) (make-bst Z1 false false))))
(define DB-name (make-db widget-name string<? string=?
                         (make-bst W1
                                   (make-bst A1 false false) (make-bst Z1 false false))))
(define DB-quantity (make-db widget-quantity < =
                             (make-bst W1 false
                                       (make-bst A1 false (make-bst Z1 false false)))))
(define DB-quantityf (make-db widget-quantity < = false))
(define DB-nameslong
  (make-db widget-name string<? string=?
           (make-bst W1
                     (make-bst E1
                               (make-bst D1
                                         (make-bst C1
                                                   (make-bst B1 false false)
                                                   false) false) false)
                     (make-bst Z1 false false))))






(define (render b)
  (local
    [
     (define TEXT-SIZE 20)    
     (define TEXT-COLOR1 "pink")
     (define TEXT-COLOR2 "orange")
     (define TAB 8)
     
     
     (define (blanks n)
       (list->string (build-list n (Î»(x) #\ ))))
     
     
     (define (get-color d)
       (if (= (modulo d 2) 0) 
           TEXT-COLOR1
           TEXT-COLOR2))
     
     
     (define (to-text side w d)
       (text  (string-append (blanks (* d TAB)) side (widget-name w))
              TEXT-SIZE
              (get-color d)))
     
     
     (define (render-helper b d img side)
       (if (false? b)
           img
           (above/align "left"
                        (to-text side (bst-widget b) d)
                        (render-helper (bst-left b) (+ d 1) img "L: ")
                        (render-helper (bst-right b) (+ d 1) img "R: "))))]
    (render-helper b 0 empty-image "T: ")))











(check-expect (db-bst (insert! D1 DB-name)) (make-bst W1 (make-bst A1 false
                                                                   (make-bst D1 false false))
                                                      (make-bst Z1 false false)))

(define (insert! w DB)
  (local [(define (insert!bst bst)
            (cond [(false? bst)
                   (make-bst w false false)]
                  [((db-lt? DB) ((db-field DB) w) ((db-field DB) (bst-widget bst)))
                   (if (false? (bst-left bst))
                       (set-bst-left! bst (make-bst w false false))
                       (insert!bst (bst-left bst)))]
                  [else
                   (if (false? (bst-right bst))
                       (set-bst-right! bst (make-bst w false false))
                       (insert!bst (bst-right bst)))]))]
    (if (false? (db-bst DB))
        (make-db (db-field DB) (db-lt? DB) (db-eq? DB) (make-bst w false false))
        (begin
          (insert!bst (db-bst DB))
          (make-db (db-field DB) (db-lt? DB) (db-eq? DB) (db-bst DB))))))
    



(check-expect (db-bst (insert-avl E1 DB-names))
              (make-bst W1 (make-bst A1 false (make-bst E1 false false)) (make-bst Z1 false false)))

(check-expect (db-bst (insert-avl A1 DB-nameslong))
              (make-bst E1 (make-bst C1 (make-bst B1 (make-bst A1 false false) false)
                                     (make-bst D1 false false))
                        (make-bst W1 false (make-bst Z1 false false))))

(define (insert-avl w DB)
  (local [(define (insert w bst)
            (cond [(false? bst)
                   (make-bst w false false)]
                  [((db-lt? DB) ((db-field DB) w) ((db-field DB) (bst-widget bst)))
                   (make-bst (bst-widget bst) (balance
                                               (insert w (balance (bst-left bst) DB)) DB)
                             (balance (bst-right bst) DB))]
                  [else
                   (make-bst (bst-widget bst) (balance (bst-left bst) DB)
                             (balance (insert w (balance (bst-right bst) DB)) DB))]))]
    (make-db (db-field DB) (db-lt? DB) (db-eq? DB)
             (balance (insert w (balance (db-bst DB) DB)) DB))))






(check-expect
 (balance (make-bst B1 (make-bst A1 false false)
                    (make-bst C1 false (make-bst D1 false (make-bst E1 false false))))
          (make-db widget-name string<? string=?
                   (make-bst B1 (make-bst A1 false false)
                             (make-bst C1 false
                                       (make-bst D1 false
                                                 (make-bst E1 false false))))))
 (make-bst C1 (make-bst B1 (make-bst A1 false false) false)
           (make-bst D1 false (make-bst E1 false false))))

(check-expect
 (balance (make-bst B1 (make-bst A1 false false)
                    (make-bst C1 false
                              (make-bst W1 (make-bst E1 false false) false)))
          (make-db widget-name string<? string=?
                   (make-bst B1 (make-bst A1 false false)
                             (make-bst C1 false (make-bst W1
                                                          (make-bst E1 false false) false)))))
 (make-bst C1 (make-bst B1 (make-bst A1 false false) false)
           (make-bst W1 (make-bst E1 false false) false)))

(check-expect
 (balance (make-bst B1 (make-bst A1 false false)
                    (make-bst C1 false (make-bst W1
                                                 (make-bst E1 false false)
                                                 (make-bst Z1 false false))))
          (make-db widget-name string<? string=?
                   (make-bst B1 (make-bst A1 false false)
                             (make-bst C1 false (make-bst W1
                                                          (make-bst E1 false false)
                                                          (make-bst Z1 false false))))))
 (make-bst C1 (make-bst B1 (make-bst A1 false false) false)
           (make-bst W1 (make-bst E1 false false) (make-bst Z1 false false))))


(define (balance bst DB)
  (if (> (height-diff bst) 1)
      (cond [ (and (and (not (false? (bst-left (bst-left bst)))) (not (false? (bst-left bst))))
                   (and ((db-lt? DB) ((db-field DB) (bst-widget (bst-left (bst-left bst))))
                                     ((db-field DB) (bst-widget (bst-left bst))))
                        ((db-lt? DB) ((db-field DB) (bst-widget (bst-left bst)))
                                     ((db-field DB) (bst-widget bst)))))
              (balance (make-bst (bst-widget (bst-left bst)) (bst-left (bst-left bst))
                                 (make-bst (bst-widget bst) (bst-right (bst-left bst))
                                           (bst-right bst))) DB)]
            [(and (and (not (false? (bst-right (bst-left bst))))
                       (not (false? (bst-left bst))))
                  (and ((db-lt? DB) ((db-field DB) (bst-widget (bst-right (bst-left bst))))
                                    ((db-field DB) (bst-widget (bst-left bst))))
                       ((db-lt? DB) ((db-field DB) (bst-widget (bst-left bst)))
                                    ((db-field DB) (bst-widget bst)))))
             (balance (make-bst (bst-widget (bst-right (bst-left bst)))
                                (make-bst (bst-widget (bst-left bst))
                                          (bst-left (bst-left bst)) (bst-left
                                                                     (bst-right (bst-left bst))))
                                (make-bst (bst-widget bst)
                                          (bst-right (bst-right (bst-left bst)))
                                          (bst-right bst))) DB)])
      (if (< (height-diff bst) -1)
          (cond [ (and (and (not (false? (bst-right (bst-right bst))))
                            (not (false? (bst-right bst))))
                       (and ((db-lt? DB) ((db-field DB) (bst-widget (bst-right bst)))
                                         ((db-field DB) (bst-widget (bst-right (bst-right bst)))))
                            ((db-lt? DB) ((db-field DB) (bst-widget bst))
                                         ((db-field DB) (bst-widget (bst-right bst))))))
                  (balance
                   (make-bst (bst-widget (bst-right bst))
                             (make-bst (bst-widget bst) (bst-left bst) (bst-left (bst-right bst)))
                             (bst-right (bst-right bst))) DB)]
                [(and (and (not (false? (bst-left (bst-right bst)))) (not (false? (bst-right bst))))
                      (and ((db-lt? DB)
                            ((db-field DB) (bst-widget (bst-left (bst-right bst))))
                            ((db-field DB) (bst-widget (bst-right bst))))
                           ((db-lt? DB) ((db-field DB)
                                         (bst-widget bst)) ((db-field DB)
                                                            (bst-widget (bst-right bst))))))
                 (balance (make-bst
                           (bst-widget (bst-left (bst-right bst)))
                                    (make-bst (bst-widget bst)
                                              (bst-left bst)
                                              (bst-left
                                                                     (bst-left (bst-right bst))))
                                    (make-bst (bst-widget (bst-right bst))
                                              (bst-right (bst-left (bst-right bst)))
                                              (bst-right (bst-right bst)))) DB)])
          bst)))
                  





(define (height b)
  (local
    
    
    [(define (height-helper b d)
       (cond
         [(false? b) d]
         [else
          (max d
               (height-helper (bst-left b) (add1 d))
               (height-helper (bst-right b) (add1 d)))]))]
    (height-helper b 0)))
 




(define (height-diff b)
  (if (false? b)
      0
      (- (height (bst-left b))
         (height (bst-right b)))))



(define (insert w DB)
  (local [(define (insert w bst)
            (cond [(false? bst)
                   (make-bst w false false)]
                  [((db-lt? DB) ((db-field DB) w) ((db-field DB) (bst-widget bst)))
                   (make-bst (bst-widget bst) (insert w (bst-left bst)) (bst-right bst))]
                  [else
                   (make-bst (bst-widget bst) (bst-left bst) (insert w (bst-right bst)))]))]
    (make-db (db-field DB) (db-lt? DB) (db-eq? DB) (insert w (db-bst DB)))))



(check-expect (find (first listb) (make-db widget-quantity < = bsttree)) (first listb))

(define (find X DB)
  (local [(define (db->widgetchar DB)
            ((db-field DB) (bst-widget (db-bst DB))))]
    (cond [(false? (db-bst DB)) false]
          [((db-eq? DB) ((db-field DB) X) (db->widgetchar DB))
           (bst-widget (db-bst DB))]
          [((db-lt? DB) ((db-field DB) X) (db->widgetchar DB))
           (find X (make-db (db-field DB) (db-lt? DB) (db-eq? DB) (bst-left (db-bst DB))))]
          [else
           (find X (make-db (db-field DB) (db-lt? DB) (db-eq? DB) (bst-right (db-bst DB))))])))


(define (random-widgets num max)
  (build-list num
              (Î»(dummy)
                (make-widget 
                 (number->string (random max))
                 (random max)
                 (random max)))))

(define DB-Q (make-db widget-quantity < = false))
(define lista (random-widgets 250000 1000000))
(define listb (random-widgets 10000 1000000))
(define bsttree (db-bst (foldr insert DB-Q listb)))
 




(define (build-tree low)
  (foldr insert DB-Q low))


(define (time-insert I L)
  (local [(define DB
            (make-db widget-quantity < = false))]
    (begin
      (time (foldr I DB L))
      "done")))


(check-expect (time-find find listb) 2)

(define (time-find F L)
  (local [(define DB
            (make-db widget-quantity < = bsttree))]
    (begin
      (time (foldr F (make-db widget-quantity < = bsttree) (foldr (db-field DB) L))
      "done")))


 
  

