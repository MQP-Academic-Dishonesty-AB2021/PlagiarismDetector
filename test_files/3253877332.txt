

#reader(lib "htdp-advanced-reader.ss" "lang")((modname assignment5_part3) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f () #f)))



(define-struct bst (widget left right))




(define-struct widget (name quantity price))




(define W1 (make-widget "W1" 1 1))
(define Z1 (make-widget "Z1" 51 16))
(define A1 (make-widget "A1" 2 3))
(define D1 (make-widget "D1" 5 5))
(define B1 (make-widget "B1" 23 10))
(define C1 (make-widget "C1" 4 4))






(define-struct db (field lt? eq? bst))


(define BST5 (make-bst Z1 false false))
(define BST4 (make-bst C1 false false))
(define BST3 (make-bst W1 false BST5))
(define BST2 (make-bst A1 false false))
(define BST1 (make-bst B1 BST2 BST4))
(define BST0 (make-bst D1 BST1 BST3))


(define BSTQ3 BST5)
(define BSTQ2 (make-bst B1 false BSTQ3))
(define BSTQ1 BST2)
(define BSTQ0 (make-bst C1 BSTQ1 BSTQ2))


(define BSTP5 (make-bst A1 false false))
(define BSTP4 (make-bst C1 BSTP5 false))
(define BSTP3 (make-bst Z1 false false))
(define BSTP2 (make-bst B1 false BSTP3))
(define BSTP1 (make-bst W1 false BSTP4))
(define BSTP0 (make-bst D1 BSTP1 BSTP2))


(define DB-quantity (make-db widget-quantity < = BSTQ0))
(define DB-name (make-db widget-name string<? string=? BST0))
(define DB-empty (make-db widget-name string<? string=? false))
(define DB-price (make-db widget-price < = BSTP2))











(check-expect (db-bst (insert A1 DB-empty)) (make-bst A1 false false))
(check-expect (db-bst (insert W1 DB-quantity)) (make-bst C1                                                
                                                         (make-bst A1
                                                                   (make-bst W1 false false)
                                                                   false)
                                                         (make-bst B1
                                                                   false                                                 
                                                                   (make-bst Z1 false false ))))

(check-expect (db-bst (insert D1 DB-quantity)) (make-bst C1
                                                         (make-bst A1 false false)
                                                         (make-bst B1                                                        
                                                          (make-bst D1 false false)
                                                          (make-bst Z1 false false))))
(check-expect (db-bst (insert D1 DB-price)) (make-bst B1
                                                      (make-bst D1 false false)
                                                      (make-bst Z1 false false)))
             
(define (insert val db)
  (local[
         
         
         (define (insert-inner val db)          
           (make-db (db-field db) (db-lt? db) (db-eq? db)
                    (insert-value val (db-bst db))))

         
         
         (define (insert-value w b)
           (cond
             [(false? b) (make-bst w false false)]   
             [((db-lt? db) ((db-field db) w) ((db-field db) (bst-widget b))) 
              (make-bst (bst-widget b)
                        (insert-value w (bst-left b))
                        (bst-right b))]
             [else                                   
              (make-bst (bst-widget b)
                        (bst-left b)
                        (insert-value w (bst-right b)))]))
         ]
    (insert-inner val db)))






(check-expect (db-bst (insert! D1 DB-quantity)) (make-bst C1
                                                          (make-bst A1 false false)
                                                          (make-bst B1                                                           
                                                                    (make-bst D1 false false)
                                                                    (make-bst Z1 false false))))
(check-expect (db-bst (insert! D1 DB-empty)) (make-bst D1 false false))
(check-expect (db-bst (insert! W1 DB-price)) (make-bst B1
                                                       (make-bst W1 false false)
                                                       (make-bst Z1 false false)))

(define (insert! val db)
  (local[
         
         (define (insert-inner val db)          
           (begin (make-db (db-field db) (db-lt? db) (db-eq? db)
                           (insert-value! val (db-bst db))) db))

         
         (define (smaller? val bst)
           ((db-lt? db) ((db-field db) val) ((db-field db) (bst-widget bst)))) 

         
         (define (insert-value! val bst)
           (cond
             [(false? bst)
              (set-db-bst! db (make-bst val false false))]
             
             [(smaller? val bst)
              (if (false? (bst-left bst))                  
                  (set-bst-left! bst (make-bst val false false))                  
                  (insert-value! val (bst-left bst)))]
             
             [else
              (if (false? (bst-right bst))                  
                  (set-bst-right! bst (make-bst val false false))                   
                  (insert-value! val (bst-right bst)))]
             ))]
    (insert-inner val db)))










(define (height b)
  (local
    
    
    [(define (height-helper b d)
       (cond
         [(false? b) d]
         [else
          (max d
               (height-helper (bst-left b) (add1 d))
               (height-helper (bst-right b) (add1 d)))]))]
    (height-helper b 0)))







(define (height-diff b)
  (if (false? b)
      0
      (- (height (bst-left b))
         (height (bst-right b)))))






(define BST52 (make-bst Z1 false false))
(define BST42 (make-bst C1 false BST52))
(define BST32 (make-bst W1 false false))
(define BST22 (make-bst A1 false BST32))
(define BST12 (make-bst B1 false false))
(define BST02 (make-bst D1 BST12 BST42))
(define DB-AVL (make-db widget-name string<? string=? BST22))
(define DB-AVL2 (make-db widget-name string<? string=? BST02))
(check-expect (db-bst (insert-avl D1 DB-AVL))
              (make-bst D1
                        (make-bst A1 false false)
                        (make-bst W1 false false)))
(check-expect (db-bst (insert-avl D1 DB-AVL))
              (make-bst D1
                        (make-bst A1 false false)
                        (make-bst W1 false false)))

(check-expect (db-bst (insert-avl A1 DB-AVL2))
              (make-bst D1
                        (make-bst B1
                                  (make-bst A1 false false)
                                  false)
                        (make-bst C1
                                  false
                                  (make-bst Z1 false false))))

(define (insert-avl val db)
  (local[
         
         
         (define (insert-inner val db)          
           (make-db (db-field db) (db-lt? db) (db-eq? db)
                    (insert-value val (db-bst db))))

         
         
         (define (smaller? w b)
           ((db-lt? db) ((db-field db) w) ((db-field db) (bst-widget b))))

         
         
         
         (define (insert-value w b)
           (cond
             [(false? b) (make-bst w false false)]   
             [(smaller? w b)                         
              (balance (make-bst (bst-widget b)
                                 (insert-value w (bst-left b))
                                 (bst-right b)))]
             [else                                   
              (balance(make-bst (bst-widget b)
                                (bst-left b)
                                (insert-value w (bst-right b))))]))
         ]
    (insert-inner val db)))





(define (balance b)
  (local [(define diff (height-diff b))]
    (cond [(<=(abs diff) 1) b]
          [else
           (if (> diff 0) 
               (if (> (height-diff (bst-left b)) 0)  
                   (swapLL b)
                   (swapLR b)
                   )
               (if (> (height-diff (bst-right b)) 0) 
                   (swapRL b)
                   (swapRR b)
                   ))
           ])))




(define BSTLL (make-bst W1 (make-bst B1
                                     (make-bst A1 false false) false)
                        Z1))
(check-expect (swapLL BSTLL) (make-bst B1
                                       (make-bst A1 false false)
                                       (make-bst W1 false Z1)))
(define (swapLL bst)
  (local[(define BST0 bst)]
    (make-bst (bst-widget (bst-left BST0))
              (bst-left (bst-left BST0))
              (make-bst (bst-widget BST0)
                        (bst-right (bst-left BST0))
                        (bst-right BST0)))))



(define BSTLR (make-bst W1
                        (make-bst B1 false (make-bst A1 false false))
                        Z1))
(check-expect (swapLR BSTLR) (make-bst A1
                                       (make-bst B1 false false)
                                       (make-bst W1 false Z1)))
(define (swapLR bst)
  (local[(define BST0 bst)]
    (swapLL (make-bst (bst-widget BST0)
                      (make-bst (bst-widget (bst-right (bst-left BST0)))
                                (make-bst (bst-widget (bst-left BST0))
                                          (bst-left (bst-left BST0)) 
                                          (bst-left (bst-right (bst-left BST0)))) 
                                (bst-right (bst-right (bst-left BST0))))                      
                      (bst-right BST0)))))




(define BSTRL (make-bst A1
                        false
                        (make-bst W1 (make-bst B1 false false) Z1)
                        ))
(check-expect (swapRL BSTRL) (make-bst B1
                                       (make-bst A1 false false)
                                       (make-bst W1 false Z1)))

(define (swapRL bst)
  (local[(define BST0 bst)]
    (swapRR (make-bst (bst-widget BST0)
                      (bst-left BST0)
                      (make-bst (bst-widget (bst-left (bst-right BST0)))
                                (bst-left (bst-left (bst-right BST0)))
                                (make-bst (bst-widget (bst-right BST0))                                           
                                          (bst-right (bst-left (bst-right BST0)))
                                          (bst-right (bst-right BST0))))))))                                                      
                                                     



(define BSTRR (make-bst A1
                        false
                        (make-bst B1 false (make-bst W1 false Z1))))
(check-expect (swapRR BSTRR) (make-bst
                              B1
                              (make-bst A1 false false)
                              (make-bst W1 false Z1)))
(define (swapRR bst)
  (local[(define BST0 bst)]
    (make-bst (bst-widget (bst-right BST0))             
              (make-bst (bst-widget BST0) (bst-left BST0)
                        (bst-left (bst-right BST0)))
              (bst-right (bst-right BST0)))))














(define (time-insert num slen maxnum db)
  (local [(define LOW (random-widgets-string num slen maxnum))] 
    (begin (time (foldl insert                                  
                        (make-db (db-field db) (db-lt? db) (db-eq? db) false)
                        LOW))
           (time (foldl insert!                                 
                        (make-db (db-field db) (db-lt? db) (db-eq? db) false)
                        LOW))
           "UP: insert









(define (time-find num slen maxnum db)
  (local [(define LOW (random-widgets-string num slen maxnum))  
          (define BST (foldl insert      
                             (make-db (db-field db) (db-lt? db) (db-eq? db) false)
                             LOW))
          (define AVL (foldl insert-avl  
                             (make-db (db-field db) (db-lt? db) (db-eq? db) false)
                             LOW))]
    
    (begin (time (map (lambda (n) (find-db ((db-field db) n) BST)) LOW))
           (time (map (lambda (n) (find-db ((db-field db) n) AVL)) LOW))
           "UP: find in BST





(check-expect (find-db "Z1" DB-name) Z1)
(check-expect (find-db "D1" DB-name) D1)
(check-expect (find-db "" DB-name) false)


(check-expect (find-db 23 DB-quantity) B1)
(check-expect (find-db 2 DB-quantity) A1)
(check-expect (find-db 0 DB-quantity) false)

(define (find-db val db)
  (local [
          
          
          
          (define (smaller? v db0) 
            ((db-lt? db0) v  ((db-field db0) (bst-widget (db-bst db0)))))

          
          
          (define (same? v db0)
            ((db-eq? db0) v ((db-field db0) (bst-widget (db-bst db0)))))]
    
    (cond
      [(false? (db-bst db)) false]
      [(same? val db) (bst-widget (db-bst db))]
      [(smaller? val db)
       (find-db val (make-db (db-field db) (db-lt? db) (db-eq? db) (bst-left (db-bst db))))]
      [else
       (find-db val (make-db (db-field db) (db-lt? db) (db-eq? db) (bst-right (db-bst db))))])))









(define (random-widgets num max)
  (build-list num
              (λ(dummy)
                (make-widget 
                 (number->string (random max))
                 (random max)
                 (random max)))))







(define (random-widgets-string num slen nmax)
  (local
    [(define (random-string len)
       (list->string (build-list len (λ(dummy)
                                       (integer->char (+ 97 (random 26)))))))]
    (build-list num
                (λ(dummy)
                  (make-widget
                   (random-string slen) 
                   (random nmax)
                   (random nmax))))))







(require 2htdp/image)
(define (render b)
  (local
    [
     (define TEXT-SIZE 20)    
     (define TEXT-COLOR1 "pink")
     (define TEXT-COLOR2 "orange")
     (define TAB 8)
     
     
     (define (blanks n)
       (list->string (build-list n (λ(x) #\ ))))
     
     
     (define (get-color d)
       (if (= (modulo d 2) 0)
           TEXT-COLOR1
           TEXT-COLOR2))
     
     
     (define (to-text side w d)
       (text  (string-append (blanks (* d TAB)) side (widget-name w))
              TEXT-SIZE
              (get-color d)))
     
     
     (define (render-helper b d img side)
       (if (false? b)
           img
           (above/align "left"
                        (to-text side (bst-widget b) d)
                        (render-helper (bst-left b) (+ d 1) img "L: ")
                        (render-helper (bst-right b) (+ d 1) img "R: "))))]
    (render-helper b 0 empty-image "T: ")))