

#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname |assignment 1 code|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)


























(define (backwards str) "")










(define-struct customer (firstName lastName age zipCode))






(define Mary (make-customer "Mary" "Louis" 37 70890))
(define Joe (make-customer "Joe" "Don" 60 90673))
(define Alvin (make-customer "Alvin" "Smith" 23 29483))

      















(check-expect (birthday Mary) (make-customer "Mary" "Louis" 38 70890))
(check-expect (birthday Joe) (make-customer "Joe" "Don" 61 90673))
(check-expect (birthday Alvin) (make-customer "Alvin" "Smith" 24 29483))







(define (birthday cus)
  (make-customer (customer-firstName cus) 
                 (customer-lastName cus) 
                 (+ (customer-age cus) 1) 
                 (customer-zipCode cus)))













(check-expect (name-change Mary "Glenda" "Johnson") (make-customer "Glenda" "Johnson" 37 70890))
(check-expect (name-change Joe "Andrew" "Field") (make-customer "Andrew" "Field" 60 90673))
(check-expect (name-change Alvin "Don" "Cheadle") (make-customer "Don" "Cheadle" 23 29483))









(define (name-change cus fname lname)
  (make-customer fname 
                 lname
                 (customer-age cus) 
                 (customer-zipCode cus)))


                 






(define-struct simple-img (shape area color))





(define SI (make-simple-img "triangle" 250 "red"))
(define SI2 (make-simple-img "square" 200 "purple"))
(define SI5 (make-simple-img "square" 0 "blue"))
(define SI4 (make-simple-img "circle" 100 "green"))

    














  
(check-expect (bigger? SI SI2) true)
(check-expect (bigger? SI2 SI) false)
(check-expect (bigger? SI SI) false)
(check-expect (bigger? SI2 SI5) true)
(check-expect (bigger? SI5 SI2) false)










(define (bigger? img1 img2)
  (> (simple-img-area img1) (simple-img-area img2)))














(check-expect (build-image SI) (triangle (sqrt (/ (* 4 250) (sqrt 3))) "solid" "red"))
(check-expect (build-image SI2) (square (sqrt 200) "solid" "purple"))
(check-expect (build-image SI5) (square 0 "solid" "blue"))
(check-expect (build-image SI) .)





     


(define (build-image img)
  (cond [(string=? (simple-img-shape img) "triangle")
         (triangle (sqrt (/ (* 4 (simple-img-area img)) (sqrt 3))) "solid" (simple-img-color img))]
        [(string=? (simple-img-shape img) "square") 
         (square (sqrt (simple-img-area img)) "solid" (simple-img-color img))]
        [(string=? (simple-img-shape img) "circle")
         (circle (sqrt (/ (simple-img-area img) pi)) "solid" (simple-img-color img))]))
         
         
         
         
         







(define-struct diff (type position content))
    










(define str1 "0123456789")
(define str2 "xyzzy")
(define diff1 (make-diff "insert" 1 str2))
(define diff2 (make-diff "delete" 3 2))



















       
(check-expect (update diff1 str1) "0xyzzy123456789")
(check-expect (update diff2 str1) "01256789")

(define (update file-diff str)
  (cond [(string=? (diff-type file-diff) "insert") (insert file-diff str)]
        [(string=? (diff-type file-diff) "delete") (delete file-diff str)]))

(check-expect (insert diff1 str1) "0xyzzy123456789")
(check-expect (insert (make-diff "insert" 0 "hi") " whats up") "hi whats up")
(check-expect (insert (make-diff "insert" 999 "hi") "whats up ") "whats up hi")
(check-expect (insert (make-diff "insert" -1 "hi") " whats up bro") "hi whats up bro")

(define (insert file-diff str)
  (cond [(> (diff-position file-diff) (string-length str))
         (string-append
          str
          (diff-content file-diff))]
        [(< (diff-position file-diff) 0)
         (string-append
          (diff-content file-diff)
          str)]
        [else
         (string-append 
          (substring str 0 (diff-position file-diff)) 
          (diff-content file-diff) 
          (substring str (diff-position file-diff)))]))

(check-expect (delete diff2 str1) "01256789")
(check-expect (delete (make-diff "delete" 2 4) str1) "016789")
(check-expect (delete (make-diff "delete" -1 8) str1) str1)
(check-expect (delete (make-diff "delete" 20 8) str1) str1)

(define (delete file-diff str)
  (cond [(> (diff-position file-diff) (string-length str)) str]
        [(> (+ (diff-position file-diff) (diff-content file-diff)) (string-length str)) str]
        [(< (diff-position file-diff) 0) str]
        [else
         (string-append
          (substring str 0 (diff-position file-diff))
          (substring str (+ (diff-position file-diff)
                            (diff-content file-diff))))]))
  
  
 
 
 
 


(define str3 "How are you today?")
(define diff3 (make-diff "delete" 4 3))
(define diff4 (make-diff "insert" 4 "were"))
(define diff5 (make-diff "delete" 13 5))
(define diff6 (make-diff "insert" 13 "yesterday"))


"Part 1: File Diffs #3 Process:"
str3
(update diff3 str3)
(update diff4 (update diff3 str3))
(update diff5 (update diff4 (update diff3 str3)))
(update diff6 (update diff5 (update diff4 (update diff3 str3))))

(check-expect (update diff6 (update diff5 (update diff4 (update diff3 str3)))) "How were you yesterday?")














(define I1 .)
(define I2 .)
(define I3 .)
(define I4 .)
(define LOI (list I1 I2 I3 I4))
(define LOI1 empty)
(define LOI2 (cons (circle 20 "solid" "red") empty))
(define LOI3 (cons (square 50 "solid" "green") (cons (circle 20 "solid" "red") empty)))
(define LOI4 (cons (triangle 80 "solid" "blue") (cons (square 50 "solid" "green") (cons (circle 20 "solid" "red") empty))))

   


















(check-expect (total-width LOI1) 0)
(check-expect (total-width LOI2) 40)
(check-expect (total-width LOI3) 90)
(check-expect (total-width LOI) 265) 

(define (total-width loi)
  (cond [(empty? loi) 0]
        [else
         (+ (image-width (first loi))
            (total-width (rest loi)))]))












(check-expect (taller-than LOI1 20) empty)
(check-expect (taller-than LOI2 1) 
              (cons (circle 20 "solid" "red") empty))
(check-expect (taller-than LOI3 45)
              (cons (square 50 "solid" "green") empty))
(check-expect (taller-than LOI4 45)
              (cons (triangle 80 "solid" "blue") (cons (square 50 "solid" "green") empty)))
(check-expect (taller-than LOI 30)
              (list . .))

(define (taller-than loi cutoff)
  (cond [(empty? loi) empty]
        [(> (image-height (first loi)) cutoff) 
         (cons (first loi) (taller-than (rest loi) cutoff))]
        [else (taller-than (rest loi) cutoff)]))













(define simple-img-circle (make-simple-img "circle" 400 "red"))
(define simple-img-square (make-simple-img "square" 200 "green"))
(define simple-img-triangle (make-simple-img "triangle" 250 "blue"))
(define SI1 (make-simple-img "circle" 120 "red"))
(define SI3 (make-simple-img "circle" 40 "purple"))


(define LOSI1 empty)
(define LOSI2 (cons simple-img-circle empty))
(define LOSI3 (cons simple-img-square (cons simple-img-circle empty)))
(define LOSI4 (cons simple-img-triangle (cons simple-img-square (cons simple-img-circle empty))))
(define LOSI5 (cons simple-img-triangle (cons simple-img-square (cons simple-img-square empty))))

   






(check-expect (find-shape LOSI1 "triangle") empty)
(check-expect (find-shape LOSI2 "circle") (cons (build-image simple-img-circle) empty))
(check-expect (find-shape LOSI3 "triangle") empty)
(check-expect (find-shape LOSI4 "circle") (cons (build-image simple-img-circle) empty))
(check-expect (find-shape LOSI5 "square") (cons (build-image simple-img-square) (cons (build-image simple-img-square) empty)))
(check-expect (find-shape (list SI SI1 SI2 SI3) "circle")
              (list . .))









(define (find-shape losi whichShape)
  (cond [(empty? losi) empty]
        [(compare-shape (first losi) whichShape)
         (cons (build-image (first losi))
               (find-shape (rest losi) whichShape))]
        [else (find-shape (rest losi) whichShape)]))

(check-expect (compare-shape simple-img-circle "circle") true)
(check-expect (compare-shape simple-img-circle "square") false)
(check-expect (compare-shape simple-img-triangle "circle") false)
(check-expect (compare-shape simple-img-triangle "triangle") true)
(check-expect (compare-shape (first LOSI2) "circle") true)
(check-expect (compare-shape (first LOSI3) "square") true)
(check-expect (compare-shape (first LOSI3) "triangle") false)

(define (compare-shape simple-img shape-name)
  (cond [(string=? (simple-img-shape simple-img) shape-name) true]
        [else false]))
        



















(define str4 "


(define diff7 (make-diff "insert" 2 str1))

(define LOD1 empty)
(define LOD2 (cons diff1 empty))
(define LOD3 (cons diff1 (cons diff2 empty)))
(define LOD4 (cons diff7 (cons diff1 (cons diff2 empty))))

(define (fn-for-lod lod)
  (cond [(empty? lod) (...)]
        [else
         (... (first lod)
              (fn-for-lod (rest lod)))]))














(check-expect (updates LOD1 str1) str1)
(check-expect (updates LOD2 str1) "0xyzzy123456789")
(check-expect (updates LOD3 str1) "0xyy123456789")
(check-expect (updates LOD4 str4) "
(check-expect (updates (cons diff3 (cons diff4 (cons diff5 (cons diff6 empty)))) str3) "How were you yesterday?")

(define (updates lod str)
  (cond [(empty? lod) str]
        [(empty? (rest lod)) (update (first lod) str)]
        [else (updates (rest lod) (update (first lod) str))]))